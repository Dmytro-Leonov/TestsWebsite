# Generated by Django 4.1.7 on 2023-04-06 14:19

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('questions', '0003_alter_answer_id_alter_question_id_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Test',
            fields=[
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1)])),
                ('description', models.TextField(blank=True, max_length=500)),
                ('time_limit_seconds', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('attempts', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('number_of_questions', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('score', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('shuffle_questions', models.BooleanField()),
                ('shuffle_answers', models.BooleanField()),
                ('show_score_after_test', models.BooleanField()),
                ('show_answers_after_test', models.BooleanField()),
                ('give_extra_time', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.CharField(db_index=True, max_length=256)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_tests', to='questions.question')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='has_questions', to='tests.test')),
            ],
        ),
        migrations.AddField(
            model_name='test',
            name='questions',
            field=models.ManyToManyField(related_name='tests', through='tests.TestQuestion', to='questions.question'),
        ),
        migrations.AddField(
            model_name='test',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='testquestion',
            constraint=models.UniqueConstraint(models.F('test'), models.F('question'), name='unique_test_question', violation_error_message='Each question can be added to test only once'),
        ),
        migrations.AddConstraint(
            model_name='testquestion',
            constraint=models.UniqueConstraint(models.F('test'), models.F('order'), name='unique_test_question_order', violation_error_message='An error occurred, refresh the page and try again'),
        ),
        migrations.AlterUniqueTogether(
            name='testquestion',
            unique_together={('test', 'question', 'order')},
        ),
        migrations.AddConstraint(
            model_name='test',
            constraint=models.UniqueConstraint(models.F('user'), models.F('name'), name='unique_test_name', violation_error_message='You have already created test with this name'),
        ),
    ]
